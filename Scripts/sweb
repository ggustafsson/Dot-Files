#!/usr/bin/env ruby

# Description: This script is used for analysing and searching through my bank
# transaction logs (specific to Swedbank). The logs are manually downloaded and
# automatically converted from text files to CSV files with another script
# called "swebp".
#
# THIS IS WORK IN PROGRESS! Half of it works.

# Usage: sweb <file>
#        sweb <file> <pattern>
#        sweb -s <file>

# Written by Göran Gustafsson (gustafsson.g at gmail.com).
# License: BSD 3-Clause.

filename = File.basename($0)

unless ARGV.length >= 1
  puts "Usage: #{filename} [OPTION]... [FILENAME]... [PATTERN]...

  -s, --stats  View statistics about all transactions.

Examples:

  #{filename} -s Sparkonto.csv   # View statistics about all transactions.
  #{filename} Sparkonto.csv      # View all transactions.
  #{filename} Sparkonto.csv lön  # Search through all transactions."
  exit
end

require "csv"

def print_frequently(input)
  column1 = "%-12s" % "Antal gånger"
  column2 = "%-16s" % @header[2] # Referens
  column3 = "%-26s" % @header[3] # Kontohändelse
  column4 = "% 16s" % "Total summa"

  puts "-" * 79
  puts "#{column1} | #{column2} | #{column3} | #{column4}"
  puts "-" * 79

  # Do something here.

  puts "-" * 79
end

def print_sum(input, type)
  input_total = 0
  weekdays = Hash.new(0)
  monthdays = Hash.new(0)

  input.each do |row|
    input_total += row[4]

    weekday = Date.parse(row[1]).wday
    weekdays[weekday] += 1

    monthday = Date.parse(row[1]).day
    monthdays[monthday] += 1
  end

  freq_weekday = weekdays.max_by{ |key, value| value }[0]

  case freq_weekday
  when 0
    freq_weekday = "Söndag"
  when 1
    freq_weekday = "Måndag"
  when 2
    freq_weekday = "Tisdag"
  when 3
    freq_weekday = "Onsdag"
  when 4
    freq_weekday = "Torsdag"
  when 5
    freq_weekday = "Fredag"
  when 6
    freq_weekday = "Lördag"
  end

  freq_monthday = monthdays.max_by{ |key, value| value }[0]

  if type == 1
    type = "Insättningar"
  else
    type = "Utgifter"
  end

  column1 = "%-15s" % type
  column2 = "%-12s" % input.length
  column3 = "%-13s" % freq_weekday
  column4 = "%-15s" % freq_monthday
  column5 = "% 12s" % ("%.02f" % input_total.round(2))

  puts "#{column1} | #{column2} | #{column3} | #{column4} | #{column5}"
end

def print_table(input)
  column1 = "%-17s" % @header[1] # Transaktionsdatum
  column2 = "%-16s" % @header[2] # Referens
  column3 = "%-26s" % @header[3] # Kontohändelse
  column4 = "% 11s" % @header[4] # Belopp

  puts "-" * 79
  puts "#{column1} | #{column2} | #{column3} | #{column4}"
  puts "-" * 79

  total = 0

  input.each do |row|
    total += row[4]

    column1 = "%-17s" % row[1] # Transaktionsdatum
    column2 = "%-16s" % row[2] # Referens
    column3 = "%-26s" % row[3] # Kontohändelse
    column4 = "% 11s" % ("%.02f" % row[4]) # Belopp

    puts "#{column1} | #{column2} | #{column3} | #{column4}"
  end

  hits = "%-39s" % ("Antal träffar: #{input.length}")
  total = "% 39s" % ("Total summa: %.02f" % total.round(2))

  puts "-" * 79
  puts "#{hits} #{total}"
  puts "-" * 79
end

if ARGV[0] == "-s"
  file = ARGV[1]
else
  file = ARGV[0]
end

search = ARGV[1,ARGV.length].join(" ").downcase
ignore = ""
ignore_file = "#{Dir.home}/.swebignore"

if !File.exist?(file)
  abort "File '#{file}' does not exist! Exiting..."
elsif CSV.read(file).empty?
  abort "No entries found! Exiting..."
end

if File.exist?(ignore_file)
  ignore = File.readlines(ignore_file).each{ |line| line.chomp! }
end

data = CSV.read(file, { :headers => :first_row,
                        :col_sep => ";",
                        :converters => :numeric })

@header = data[0].headers

if ARGV[0] == "-s"
  income, outcome = [], []

  data.each do |row|
    reference = row[2].to_s
    description = row[3].to_s

    next if ignore.include?(reference) or ignore.include?(description)

    if row[4] > 0
      income << row
    else
      outcome << row
    end
  end

  income = income.sort_by{ |row| row.values_at(4) }.reverse
  outcome = outcome.sort_by{ |row| row.values_at(4) }

  puts "1.  Största insättningarna"
  print_table income[0,20]

  puts "\n2.  Mest frekventa insättningarna"
  print_frequently "something"

  puts "\n3.  Största utgifterna"
  print_table outcome[0,20]

  puts "\n4.  Mest frekventa utgifterna"
  print_frequently "something"

  puts "\n5.  Övrig information"

  column1 = "%-15s" % "Transaktionstyp"
  column2 = "%-12s" % "Antal gånger"
  column3 = "%-13s" % "Vanligast dag"
  column4 = "%-15s" % "Vanligast datum"
  column5 = "% 12s" % "Total summa"

  puts "-" * 79
  puts "#{column1} | #{column2} | #{column3} | #{column4} | #{column5}"
  puts "-" * 79

  print_sum(income, 1)
  print_sum(outcome, 0)

  puts "-" * 79
elsif search.length > 0
  results = []

  data.each do |row|
    reference = (row[2].to_s).downcase
    description = (row[3].to_s).downcase

    # Ruby can't handle downcase of UTF-8 characters by default so i have to
    # use this ugly hack :'(
    ["Å","Ä","Ö"].each do |letter|
      case letter
      when "Å"
        replacement = "å"
      when "Ä"
        replacement = "ä"
      when "Ö"
        replacement = "ö"
      end

      reference = reference.gsub(letter, replacement)
      description = description.gsub(letter, replacement)
      search = search.gsub(letter, replacement)
    end

    if reference.include?(search) or description.include?(search)
      results << row
    end
  end

  puts "Söksträng: #{search}"
  print_table results
else
  print_table data
end

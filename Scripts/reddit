#!/usr/bin/env ruby

# Written by GÃ¶ran Gustafsson <gustafsson.g@gmail.com>.

# Description: This script automatically opens up all new posts found in
# specificed subreddits under new browser tabs. It keeps track of all the URLs
# opened at the last run.

# The subreddits that are supposed to be checked should be specified in the
# file ~/.reddit/config like this:
#
# aww
# funny
# pics
# wtf

# Usage: reddit
#        reddit <config>

require "fileutils"
require "json"
require "open-uri"

if RUBY_PLATFORM.include?("darwin")
  $browser = "open"
else
  $browser = "firefox"
end

$directory = "#{Dir.home}/.reddit"
$filter_gifs = 1 # GIFs makes Safari go bananas :(

# Check if the default config file should be used or not.
if ARGV.length == 0
  config_file = "#{$directory}/config"
else
  config_file = ARGV[0]
end


def check_subreddit(subreddit)
  new_log_file = "#{$directory}/r_#{subreddit}_tmp"
  old_log_file = "#{$directory}/r_#{subreddit}"
  visited_urls = []
  new_entry = 0

  puts "Checking r/#{subreddit} for new posts..."

  begin
    raw_json = open("http://reddit.com/r/#{subreddit}.json").read
    parsed_json = JSON.parse(raw_json)
  rescue
    abort "Failed when trying to fetch and parse json data! Exiting..."
  end

  if File.exist?(old_log_file)
    # Read old log file and put all visited URLs inside of array visited_urls.
    File.readlines(old_log_file).each do |line|
      visited_urls << Regexp.escape(line.strip)
    end
  end

  log_file = File.open(new_log_file, "w")

  # Loop through all posts on the front page of each subreddit.
  parsed_json["data"]["children"].each do |post|
    # Put the current posts URL into a variable.
    url = post["data"]["url"]

    # Write down every URL to the log file so it can be checked next run.
    log_file.puts url

    # Ignore URLs containing ".gif" if filtering is turned on.
    next if $filter_gifs == 1 and url.include?(".gif")

    # Open up the URL if it has not been visited before.
    unless visited_urls.include?(Regexp.escape(url))
      new_entry = 1
      open_url(url)
    end
  end

  puts "No new entries found!" if new_entry == 0

  log_file.close
  FileUtils.mv(new_log_file, old_log_file) # Overwrite old log file.
end

def open_url(url)
  puts "Opening URL: #{url}"
  `#{$browser} "#{url}"` # Execute browser command with URL as argument.
end


unless File.directory?($directory)
  puts "Directory '#{$directory}' does not exist! Creating it..."
  Dir.mkdir($directory)
end

unless File.exist?(config_file)
  abort "File '#{config_file}' does not exist! Exiting..."
end

if File.read(config_file).empty?
  abort "Config file is empty. Exiting..."
end

puts "Checking Reddit for new posts."

# Read the config file and run check_subreddit on the string on each line.
File.readlines(config_file).each_with_index do |line, position|
  subreddit = line.strip

  puts

  if subreddit.empty?
    puts "Line #{position + 1} is empty. Skipping!"
    next
  else
    check_subreddit(subreddit)
  end
end
